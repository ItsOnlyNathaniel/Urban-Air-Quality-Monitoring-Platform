services:
  db:
    image: postgis/postgis:15-3.3
    container_name: air_quality_postgis_db
    environment:
      POSTGRES_DB: ${DB_NAME:-air_quality_db}
      POSTGRES_USER: ${DB_USER:-air_quality_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/init-db:/docker-entrypoint-initdb.d/
    networks:
      - air_quality_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-air_quality_user} -d ${DB_NAME:-air_quality_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: air_quality_backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-air_quality_db}
      - DB_USER=${DB_USER:-air_quality_user}
      - DB_PASSWORD=${DB_PASSWORD:-secure_password}
      - DJANGO_DEBUG=True
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-dev-secret-key-change-in-production}
    networks:
      - air_quality_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: air_quality_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    networks:
      - air_quality_network
    depends_on:
      - backend

volumes:
  postgres_data:

networks:
  air_quality_network:
    driver: bridge